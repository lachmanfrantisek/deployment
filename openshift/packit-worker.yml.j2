# MIT License
#
# Copyright (c) 2018-2019 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
---
# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ name }}
  annotations:
    # Setting triggers to StatefulSet is tricky (they also don't appear in GUI).
    # I run the following and then checked how the resulting yaml looks like.
    # oc set triggers statefulset.apps/packit-worker --from-image=packit-worker:dev -c packit-worker-1
    image.openshift.io/triggers: >-
      [{"from":{"kind":"ImageStreamTag","name":"packit-worker:{{ deployment }}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"packit-worker-1\")].image"}]
spec:
  selector:
    matchLabels:
      # has to match .spec.template.metadata.labels
      name: {{ name }}
      app: packit
  serviceName: "{{ name }}"
  replicas: {{ worker_replicas }}
  volumeClaimTemplates:
    - metadata:
        name: packit-worker-vol
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 2Gi
    - metadata:
        name: packit-worker-repository-cache
      spec:
        # The only option on OpenShift Online is AWS EBS provisioning
        # supporting only `ReadWriteOnce` access:
        # https://docs.openshift.com/online/pro/architecture/additional_concepts/storage.html#pv-restrictions
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 16Gi
  updateStrategy.type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        name: {{ name }}
        app: packit
      # https://docs.openshift.com/container-platform/3.11/dev_guide/managing_images.html#using-is-with-k8s
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
    spec:
      terminationGracePeriodSeconds: 10
      volumes:
        - name: packit-ssh
          secret:
            secretName: packit-ssh
        - name: packit-secrets
          secret:
            secretName: packit-secrets
        - name: packit-config
          secret:
            secretName: packit-config
      containers:
        - name: packit-worker-1
          image: packit-worker:{{ deployment }}
          env:
            - name: DEPLOYMENT
              value: {{ deployment }}
            - name: DISTGIT_URL
              value: {{ "https://src.fedoraproject.org/" if deployment == "prod" else "https://src.stg.fedoraproject.org/" }}
            - name: APP
              value: packit_service.worker.tasks
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: secret-access-key
            - name: QUEUE_NAME_PREFIX
              value: {{ queue_name_prefix }}
            - name: REDIS_SERVICE_HOST
              value: redis
            - name: SENTRY_SECRET
              valueFrom:
                secretKeyRef:
                  name: packit-sentry
                  key: sentry
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: postgres-secret
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: postgres-secret
            - name: POSTGRESQL_HOST
              valueFrom:
                secretKeyRef:
                  key: database-host
                  name: postgres-secret
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: postgres-secret
            - name: CELERY_RETRY_LIMIT
              value: "{{ celery_retry_limit }}"
            - name: CELERY_RETRY_BACKOFF
              value: "{{ celery_retry_backoff }}"
            - name: QUEUES
              value: "{{ queues }}"
          volumeMounts:
            - name: packit-ssh
              mountPath: /packit-ssh
            - name: packit-secrets
              mountPath: /secrets
            - name: packit-config
              mountPath: /home/packit/.config
            - name: packit-worker-vol
              mountPath: /sandcastle
            - name: packit-worker-repository-cache
              mountPath: /repository-cache
          command:
            - "/usr/bin/run_worker.sh"
          resources:
            limits:
              # cloning repos is memory intensive: glibc needs 300M+, kernel 600M+
              # during cloning, we need to account for git and celery worker processes
              memory: "896Mi"
              cpu: "400m"
          # https://github.com/packit/deployment/pull/142
          #readinessProbe:
          #  exec:
          #    command:
          #      - bash
          #      - -c
          #      # if we don't use AWS SQS (doesn't support this)
          #      - 'if (test -z "$AWS_ACCESS_KEY_ID"); then celery -A $APP status | grep $(cat /etc/hostname) | grep OK; else true; fi'
          #  initialDelaySeconds: 10
          #  periodSeconds: 60
          #livenessProbe:
          #  exec:
          #    command:
          #      - bash
          #      - -c
          #      # does this worker respond to ping?
          #      - 'if (test -z "$AWS_ACCESS_KEY_ID"); then celery -A $APP inspect ping --destination "celery@$(cat /etc/hostname)"; else true; fi'
          #  initialDelaySeconds: 10
          #  periodSeconds: 30
---
# https://docs.openshift.com/container-platform/3.11/dev_guide/managing_images.html#writing-image-stream-definitions
kind: ImageStream
apiVersion: v1
metadata:
  name: packit-worker
spec:
  tags:
    - name: {{ deployment }}
      from:
        kind: DockerImage
        name: {{ image_worker }}
      importPolicy:
        # Periodically query registry to synchronize tag and image metadata.
        scheduled: {{ auto_import_images }}
  lookupPolicy:
    # allows all resources pointing to this image stream to use it in the image field
    local: true
